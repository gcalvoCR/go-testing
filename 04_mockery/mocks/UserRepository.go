// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockUserRepositoryWithExpecter is an autogenerated mock type for the UserRepository type
type MockUserRepositoryWithExpecter struct {
	mock.Mock
}

type MockUserRepositoryWithExpecter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepositoryWithExpecter) EXPECT() *MockUserRepositoryWithExpecter_Expecter {
	return &MockUserRepositoryWithExpecter_Expecter{mock: &_m.Mock}
}

// GetUser provides a mock function with given fields: id
func (_m *MockUserRepositoryWithExpecter) GetUser(id int) (string, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (string, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepositoryWithExpecter_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type MockUserRepositoryWithExpecter_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - id int
func (_e *MockUserRepositoryWithExpecter_Expecter) GetUser(id interface{}) *MockUserRepositoryWithExpecter_GetUser_Call {
	return &MockUserRepositoryWithExpecter_GetUser_Call{Call: _e.mock.On("GetUser", id)}
}

func (_c *MockUserRepositoryWithExpecter_GetUser_Call) Run(run func(id int)) *MockUserRepositoryWithExpecter_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockUserRepositoryWithExpecter_GetUser_Call) Return(_a0 string, _a1 error) *MockUserRepositoryWithExpecter_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepositoryWithExpecter_GetUser_Call) RunAndReturn(run func(int) (string, error)) *MockUserRepositoryWithExpecter_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserRepositoryWithExpecter creates a new instance of MockUserRepositoryWithExpecter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepositoryWithExpecter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepositoryWithExpecter {
	mock := &MockUserRepositoryWithExpecter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
